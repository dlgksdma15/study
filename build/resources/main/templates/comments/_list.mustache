<div id = "comments-list">
    {{#commentDtos}}
        <div class="card m-2" id = "comments-{{id}}">
            <div class = "card-header">
                {{nickname}}
                <!-- Button trigger modal -->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-board-id="{{boardId}}">수정</button>
                <!-- 댓글 삭제 버튼 -->
                <button type = "button"
                        class = "btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">삭제</button>
            </div>
            <div class = "card-body">
                {{body}}
            </div>
        </div>
    {{/commentDtos}}
</div>
<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5
                    " id="exampleModalLabel">댓글 수정</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 폼 -->
                <form>
                    <!-- 닉네임 입력 -->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input type="text" class="form-control"
                               id="edit-comment-nickname">
                    </div>
                    <!-- 댓글 본문 입력 -->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea type="text" class="form-control" rows="3"
                                  id="edit-comment-body"></textarea>
                    </div>
                    <!-- 히든 인풋 -->
                    <input type="hidden" id="edit-comment-id" value="{{id}}">
                    <input type="hidden" id="edit-comment-board-id" value="{{id}}">
                    <!-- 전송 버튼 -->
                    <button type="button" class="btn btn-primary"
                            id = "comment-update-btn">수정 완료</button>
                    <script>
                        {
                            // 댓글 생성 버튼 변수화
                            const commentCreateBtn = document.querySelector("#comment-create-btn");
                            // 댓글 클릭 이벤트 감지
                            commentCreateBtn.addEventListener("click",function(){
                                // 새 댓글 객체 생성
                                const comment = {
                                    // 새 댓글의 닉네임
                                    nickname: document.querySelector("#new-comment-nickname").value,
                                    // 새 댓글의 본문
                                    body: document.querySelector("#new-comment-body").value,
                                    // 부모 게시글의 id
                                    boardId: document.querySelector("#new-comment-board-id").value
                                };
                                // 댓글 객체 출력
                                console.log(comment);
                                // fetch() - 비동기 통신을 위한 API
                                const url = "/api/board/" + comment.boardId + "/comments";
                                fetch(url,{
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify(comment) // comment 객체를 JSON 문자열로 변환해 전송
                                }).then(response => {
                                    // HTTP 응답 코드에 따른 메시지 출력
                                    const msg = (response.ok) ? "댓글이 등록됐습니다." : "댓글 등록 실패..!";
                                    alert(msg);
                                    // 현재 페이지 새로 고침
                                    window.location.reload();
                                })

                            });
                        }
                    </script>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- 모달 이벤트 처리-->
<script>
    {
        // 모달 요소 선택
        const commentEditModal = document.querySelector("#comment-edit-modal");
        // 모달 이벤트 감지
        commentEditModal.addEventListener("show.bs.modal",function(event){ // show.bs.modal: 모달이 열리기 직전 발생하는 이벤트
            // function(event): 이벤트를 받아 처리하는 함수, 즉 이벤트 핸들러
            // 1. 트리거 버튼 선택
            const triggerBtn = event.relatedTarget;
            // 2. 데이터 가져오기
            const id = triggerBtn.getAttribute("data-bs-id"); // id 가져오기
            const nickname = triggerBtn.getAttribute("data-bs-nickname"); // 닉네임 가져오기
            const body = triggerBtn.getAttribute("data-bs-body"); // 본문 가져오기
            const boardId = triggerBtn.getAttribute("data-bs-board-id"); // 부모 id 가져오기
            // 3. 수정 폼에 데이터 반영
            document.querySelector("#edit-comment-nickname").value = nickname;
            document.querySelector("#edit-comment-body").value = body;
            document.querySelector("#edit-comment-id").value = id;
            document.querySelector("#edit-comment-board-id").value = boardId;
        });
    }
    {
        // 수정 완료 버튼 선택
        const commentUpdateBtn = document.querySelector("#comment-update-btn");
        // 클릭 이벤트 처리
        commentUpdateBtn.addEventListener("click",function(){
            // 수정 댓글 객체 생성
            const comment = {
                id: document.querySelector("#edit-comment-id").value,
                nickname: document.querySelector("#edit-comment-nickname").value,
                body: document.querySelector("#edit-comment-body").value,
                board_id: document.querySelector("#edit-comment-board-id").value
            };
            console.log(comment); // 객체 생성 확인
            // 수정 REST API 호출
            const url = "/api/comments/" + comment.id;
            fetch(url, {
                method: "PATCH", // PATCH 요청
                headers: { // 전송 데이터 타입(JSON) 정보
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(comment) // comment 객체를 JSON 문자열로 변환 전송
            }).then(response => {
                // HTTP 응답 코드에 따른 메시지 출력
                const msg = (response.ok) ? "댓글이 수정됐습니다." : "댓글 수정 실패..!";
                alert(msg);
                // 현재 페이지 새로 고침
                window.location.reload();
            });
        });
    }
</script>
<!-- 댓글 삭제 -->
<script>
    {
        // 삭제 버튼 선택
        const commentDeleteBtn = document.querySelectorAll(".comment-delete-btn");
        // 삭제 버튼 이벤트 처리
        //     commentDeleteBtn.addEventListener("click", function() {
        //         console.log("삭제 버튼이 클릭됐습니다..!")
        // });
        commentDeleteBtn.forEach(btn => {
            btn.addEventListener("click", (event) => {
                // 이벤트 발생 요소 선택
                const commentDeleteBtn = event.target;
                // 삭제 댓글 id 가져오기
                const commentId = commentDeleteBtn.getAttribute("data-comment-id");
                console.log(`삭제 버튼 클릭: ${commentId}번 댓글`);
                // 삭제 REST API 호출
                const url = `/api/comments/${commentId}`;
                fetch(url,{
                    method: "DELETE"
                }).then(response => {
                    // 댓글 삭제 실패 처리
                    if(!response.ok){
                        alert("댓글 삭제 실패..!");
                        return;
                    }
                    // 삭제 성공 시 댓글을 화면에서 지우고 메시지 창 띄우기
                    const target = document.querySelector(`#comments-${commentId}`);
                    target.remove();
                    const msg = `${commentId}번 댓글을 삭제했습니다.`;
                    alert(msg);
                    // 현재 페이지 새로 고침
                    window.location.reload();
                })
            });
        });
    }
</script>